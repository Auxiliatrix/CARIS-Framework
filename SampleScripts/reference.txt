***************************************************************************************************************************
***************************************************************************************************************************

												CARIS Script Syntax

CARIS scripts are miniature modules that can be programmed directly from Discord onto CARIS. 
These scripts can be either globally available or unique to specific guilds, and can be either active or passive.
Active scripts are invoked when their invocation phrase is used at the beginning of a message.
Passive scripts are applicable to any message.

Please note that you must be an admin on a server in order to create a custom script.
In order to create one, you must send a message in the following format (without the tabs):

	```CARIS
	<header>
	<script>...
	```

The header designates what kind of script you're creating (global or local, active or passive), along with its name,
which is used in the invocation.
Details on how to write the script portion of the the module are available below.

***************************************************************************************************************************
***************************************************************************************************************************
HEADER - First line in file. Invocations are done using the prefix + the command name. Global commands are Developer-only.
	%Command%					|	Creates a new custom invoked command called "Command" that can be globally accessed
	=Command=					|	Creates a new custom passive command called "Command" that can be globally accessed
	+Command+					|	Creates a new custom invoked command called "Command" exclusive to the current Guild
	-Command-					|	Creates a new custom passive command called "Command" exclusive to the current Guild
***************************************************************************************************************************
COMMENTS - These are not compiled with the rest of the code.
	| This is an example of a comment
***************************************************************************************************************************
***************************************************************************************************************************
COMMANDS - Executable actions. Will only run if the author has the ability to so themselves unless specified as "~Command".
	Say "<string>"				|	Sends a message with content <string>
		Say "Hello, world!"		|		Sends a message with content "Hello, world!"
	Wait <number>				|	Waits for <number> seconds before doing anything
		Wait 5					|		Waits for 5 seconds before doing anything
	Promote <user> <role>		|	Gives the role <role> to the user <user>
		Promote @Author @Admin	|		Gives @Admin to @Author
		Promote @Author @"Mod"	|		Gives the role with name "Mod" to @Author
	Demote <user> <role>		|	Takes the role <role> from the user <user>
		Demote @Author @Admin	|		Takes @Admin from @Author
		Demote @Author @"Mod"	|		Takes the role with name "Mod" from @Author
	Mute <user>					|	Mutes the user <user>
		Mute @Author			|		Mutes @Author
	Unmute <user>				|	Unmutes the user <user>
		Unmute @Author			|		Unmutes @Author
	Deafen <user>				|	Deafens the user <user>
		Deafen @Author			|		Deafens @Author
	Undeafen <user>				|	Undeafens the user <user>
		Undeafen @Author		|		Undeafens @Author
	Kick <user>					|	Kicks the user <user>
		Kick @Author			|		Kicks @Author
	Ban <user>					|	Bans the user <user>
		Ban @Author				|		Bans @Author
---------------------------------------------------------------------------------------------------------------------------
CONTROL STRUCTURES - Control structures. See examples for more information.
	If <boolean>				|	Executes body if expression is true
	Body						|
	For .#<name> 5				|	Loops through 5 times. The counter is an accessible variable #<name> in the body
	Body						|
	Each .*<iterable>			|	Loops through each element in .*<iterable> as the accessible variable *<iterable>
	Body						|
	End							|	Designates the end of the current control structure
	Stop						|	Cuts a control structure short, preventing further iterations
---------------------------------------------------------------------------------------------------------------------------
ACCESSIBLE VARIABLES - Variable arguments. Can be used in strings in the format "$[Variable]".
	$Content					|	The entire message content
		Say "$[$Content]"		|		Sends a message containing the entire message content
	@Author						|	The message author user
		Mute @Author			|		Mutes @Author
		Say "Hi, $[@Author]!"	|		Sends a message in the form "Hi, Auxiliatrix#7280!"
---------------------------------------------------------------------------------------------------------------------------
ACCESSIBLE ITERATORS - Variables that can be used in Each control structures.
		Indexing 	|	<name>{<index>}		|	Accesses an item in the given iterable as a variable
					|		$Quoted{1}		|		A variable containing the first quoted substring in the message content
		Length		|	#<iterable>{}		|	Indicates the number of elements in the given iterable
					|		#$Word{}		|		A variable containing the number of words in the message content
	.$Quoted					|	The iterable containing each quoted substring in the message content		
	.$Word						|	The iterable containing each word in the message content
	.#Number					|	The iterable containing each number in the message content
	.@Mentioned					|	The iterable containing each user mention in the message content
	.@RoleMentioned				|	The iterable containing each role mention in the message content
	.@Users{@role}				|	The iterable containing each user for the given role
	.@Roles{@user}				|	The iterable containing each role for the given user
---------------------------------------------------------------------------------------------------------------------------
INTEGER EXPRESSIONS - Expressions that resolve to a numerical value. Numbers round down.
	<A> / <B>					|	The quotient of <A> and <B>
		$Quoted{} / 2			|		The number of quoted substrings in the message content divided by 2
	<A> * <B>					|	The product of <A> and <B>
		$Quoted{} * 2			|		The number of quoted substrings in the message content times 2
	<A> - <B>					|	The difference of <A> and <B>
		$Quoted{} - 2			|		The number of quoted substrings in the message content - 2
	<A> + <B>					|	The sum of <A> and <B>
		$Quoted{} + 2			|		The number of quoted substrings in the message content + 2
---------------------------------------------------------------------------------------------------------------------------
BOOLEAN EXPRESSIONS - Expressions that resolve as either true or false.
	?Developer					|	Whether the author is a developer
	?Admin						|	Whether the author is an admin
	?BotMention					|	Whether the bot was mentioned in the message content
	?BotName					|	Whether the bot name was included in the message content
	?'<text>'					|	Whether the message content contains the substring <text> (ignores case)
		?'Hello'				|		Whether the message content contains the substring "Hello" ignoring case
	?"<text>"					|	Whether the message content contains the substring <text> (case-sensitive)
		?"Hello"				|		Whether the message content contains the case-sensitive substring "Hello"
	?<role>						|	Whether the author has the given role
		?@Admin					|		Whether the author has the @Admin role
		?@"Mod"					|		Whether the author has a role with the name "Mod"
---------------------------------------------------------------------------------------------------------------------------
COMPARATORS - Boolean comparison operations that resolve as either true or false.
	<A> == <B>					|	Whether <A> is equal to <B> (does string comparison if A and B are different types).
		$Quoted{1} == "Hello"	|		Whether the first quoted string in the message content is "Hello"
		@Author == "Alina#0001"	|		Whether the author's username is "Alina#0001"
	<A> != <B>					|	Whether <A> isn't equal to <B> (does string comparison if A and B are different types).
	(<A> or <B>) and <C>		|	Whether either of <A> or <B> is true, and <C> is also true
	<A> and <B>					|	Whether <A> and <B> are true
	<A> or <B>					|	Whether <A> or <B> is true
***************************************************************************************************************************
***************************************************************************************************************************